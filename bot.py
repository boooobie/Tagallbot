import os, logging, asyncio
from telethon import Button
from telethon import TelegramClient, events
from telethon.tl.types import ChannelParticipantAdmin
from telethon.tl.types import ChannelParticipantCreator
from telethon.tl.functions.channels import GetParticipantRequest
from telethon.errors import UserNotParticipantError

logging.basicConfig(
    level=logging.INFO,
    format='%(name)s - [%(levelname)s] - %(message)s'
)
LOGGER = logging.getLogger(__name__)

api_id = int(os.environ.get("APP_ID"))
api_hash = os.environ.get("API_HASH")
bot_token = os.environ.get("TOKEN")
client = TelegramClient('client', api_id, api_hash).start(bot_token=bot_token)
spam_chats = []

@client.on(events.NewMessage(pattern="^/start$"))
async def start(event):
  await event.reply(
"""–ü—Ä–∏–≤–µ—Ç,
—è –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Å–æ–∑–≤–∞—Ç—å –≤—Å–µ—Ö –≤ —á–∞—Ç–µ, –≤–µ–¥—å —è –ª—É—á—à–∏–π —Ç–µ–≥–±–æ—Ç! 
*ùêáùêÑùêò! ,*
‚îè‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
‚î£ ‚Ç™ *–î–æ–±–∞–≤—å –º–µ–Ω—è –≤ —Å–≤–æ—é –≥—Ä—É–ø–ø—É* `
‚î£ ‚Ç™ –Ø –ª—É—á—à–∏–π —Ç–µ–≥–±–æ—Ç
‚îó‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
 
  –Ω–∞–ø–∏—à–∏ /help ** —á—Ç–æ –±—ã –ø–æ–ª—É—á–∏–∏—Ç—å –±–æ–ª—å—à–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–±–æ –º–Ω–µ**
 [‚ù§](https://telegra.ph/file/2fa3a833f3ccc1d98dba1.jpg),
""",
    link_preview=False,
    buttons=(
       [
        Button.url(' support', 'https://t.me/YourMouthFucking'),
        Button.url('creater', 'https://t.me/YourMouthFucking')
    ],
    )
  )

@client.on(events.NewMessage(pattern="^/help$"))
async def help(event):
  helptext = "–ö–æ–º–∞–Ω–¥—ã:/tagall,/stop. excample /tagall –ø—Ä–∏–≤–µ—Ç, –¥–æ–±–∞–≤—å –º–Ω–µ —Å–≤–æ–∏ –≥—Ä—É–ø–ø—ã, —è –ª—É—á—à–∏–π –±–æ—Ç –¥–ª—è —Ç–µ–≥–æ–≤"
  await event.reply(
    helptext,
    link_preview=False,
    buttons=(
      [
        Button.url(' support', 'https://t.me/YourMouthFucking'),
        Button.url('creater', 'https://t.me/YourMouthFucking')
      ]
    )
  )
  
@client.on(events.NewMessage(pattern="^/tagall ?(.*)"))
async def mentionall(event):
  chat_id = event.chat_id
  if event.is_private:
    return await event.respond("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö –∏ –∫–∞–Ω–∞–ª–∞—Ö")
  
  is_admin = False
  try:
    partici_ = await client(GetParticipantRequest(
      event.chat_id,
      event.sender_id
    ))
  except UserNotParticipantError:
    is_admin = False
  else:
    if (
      isinstance(
        partici_.participant,
        (
          ChannelParticipantAdmin,
          ChannelParticipantCreator
        )
      )
    ):
      is_admin = True
  if not is_admin:
    return await event.respond("–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã –º–æ–≥—É—Ç –∑–∞–ø—É—Å—Ç–∏—Ç—å")
  
  if event.pattern_match.group(1) and event.is_reply:
    return await event.respond("–£–∫–∞–∂–∏—Ç–µ –∞—Ä–≥—É–º–µ–Ω—Ç")
  elif event.pattern_match.group(1):
    mode = "text_on_cmd"
    msg = event.pattern_match.group(1)
  elif event.is_reply:
    mode = "text_on_reply"
    msg = await event.get_reply_message()
    if msg == None:
        return await event.respond("–Ø –Ω–µ –º–æ–≥—É —É–ø–æ–º–∏–Ω–∞—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ —Å—Ç–∞—Ä—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö! (—Å–æ–æ–±—â–µ–Ω–∏—è, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –¥–æ —Ç–æ–≥–æ, –∫–∞–∫ –º–µ–Ω—è –¥–æ–±–∞–≤–∏–ª–∏ –≤ –≥—Ä—É–ø–ø—É)")
  else:
    return await event.respond("–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –¥–∞–π—Ç–µ –º–Ω–µ —Ç–µ–∫—Å—Ç, —á—Ç–æ–±—ã —É–ø–æ–º—è–Ω—É—Ç—å –¥—Ä—É–≥–∏—Ö")
  
  spam_chats.append(chat_id)
  usrnum = 0
  usrtxt = ''
  async for usr in client.iter_participants(chat_id):
    if not chat_id in spam_chats:
      break
    usrnum += 1
    usrtxt += f"[{usr.first_name}](tg://user?id={usr.id}) "
    if usrnum == 5:
      if mode == "text_on_cmd":
        txt = f"{usrtxt}\n\n{msg}"
        await client.send_message(chat_id, txt)
      elif mode == "text_on_reply":
        await msg.reply(usrtxt)
      await asyncio.sleep(2)
      usrnum = 0
      usrtxt = ''
  try:
    spam_chats.remove(chat_id)
  except:
    pass

@client.on(events.NewMessage(pattern="^/stop$"))
async def cancel_spam(event):
  if not event.chat_id in spam_chats:
    return await event.respond('–¢–µ–≥–∞–ª–ª –Ω–µ –∑–∞–ø—É—â–µ–Ω')
  else:
    try:
      spam_chats.remove(event.chat_id)
    except:
      pass
    return await event.respond('–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.')

print(">> –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω <<")
client.run_until_disconnected()
